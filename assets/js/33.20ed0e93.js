(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{410:function(v,a,_){"use strict";_.r(a);var t=_(7),s=Object(t.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"jvm运行时数据区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm运行时数据区"}},[v._v("#")]),v._v(" JVM运行时数据区")]),v._v(" "),a("p",[v._v("Java源代码编译成Java Class文件后通过类加载器ClassLoader加载在JVM中")]),v._v(" "),a("ul",[a("li",[v._v("类存放在方法区中")]),v._v(" "),a("li",[v._v("类创建的对象存放在堆中")]),v._v(" "),a("li",[v._v("堆中的对象调用方法时会用到虚拟机栈，本地方法栈，程序计数器")]),v._v(" "),a("li",[v._v("方法执行时每行代码由解释器逐行执行")]),v._v(" "),a("li",[v._v("热点代码由JIT编译器即时翻译")])]),v._v(" "),a("blockquote",[a("p",[v._v("Java代码运行过程")])]),v._v(" "),a("h3",{attrs:{id:"程序计数器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[v._v("#")]),v._v(" 程序计数器")]),v._v(" "),a("ul",[a("li",[v._v("程序计数器是线程私有的，随着线程的创建而创建，随着线程的消亡而消亡")]),v._v(" "),a("li",[v._v("字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器")]),v._v(" "),a("li",[v._v("分支，循环，跳转，异常处理，线程恢复等基础功能都需要这个计数器组成")])]),v._v(" "),a("h3",{attrs:{id:"虚拟机栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈"}},[v._v("#")]),v._v(" 虚拟机栈")]),v._v(" "),a("ul",[a("li",[v._v("虚拟机栈也是线程私有的，它的生命周期与线程相同")]),v._v(" "),a("li",[v._v("虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧用于存储局部变量表、操作数据栈、动态连接、方法出口等信息。"),a("strong",[v._v("每个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程")])])]),v._v(" "),a("h3",{attrs:{id:"本地方法栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[v._v("#")]),v._v(" 本地方法栈")]),v._v(" "),a("ul",[a("li",[v._v("本地方法栈也是线程私有的，每个线程都有属于自己的本地方法栈")]),v._v(" "),a("li",[v._v("本地方法栈与虚拟机栈类似，不过虚拟机栈是为Java方法服务，而本地方法栈为本地方法服务")])]),v._v(" "),a("h3",{attrs:{id:"堆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[v._v("#")]),v._v(" 堆")]),v._v(" "),a("ul",[a("li",[v._v("是线程公有的")]),v._v(" "),a("li",[v._v("几乎所有的对象实例对象都在这里分配")]),v._v(" "),a("li",[v._v("Java堆是垃圾收集器管理的内存区域")]),v._v(" "),a("li",[a("strong",[v._v("从分配内存的角度上看，所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区，但是堆的任何区域，存储的仍然是对象的实例")])])]),v._v(" "),a("h3",{attrs:{id:"方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[v._v("#")]),v._v(" 方法区")]),v._v(" "),a("ul",[a("li",[v._v("是线程公有的")]),v._v(" "),a("li",[v._v("用于存储已经被虚拟机加载的类型信息、常量和静态变量、及时编译器编译后的代码缓存等数据")])])])}),[],!1,null,null,null);a.default=s.exports}}]);