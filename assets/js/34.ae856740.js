(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{411:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"创建和运行线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建和运行线程"}},[t._v("#")]),t._v(" 创建和运行线程")]),t._v(" "),s("p",[t._v("方法一：直接创建Thread对象，重写run方法")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一种方式，直接继承Thread类，重写run方法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t1running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nt1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nlog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mainrunning"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("方法二：实现Runnable接口，将实现传入到Thread构造方法的参数中")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第二种方式，实现Runnable接口，将实现对象传入到Thread构造方法的参数中")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t2running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        Thread t2 = new Thread(()->{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//            log.debug("running");')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//        });")]),t._v("\n")])])]),s("p",[t._v("方法三：实现Callable接口，将实现传入到FutureTask构造方法的参数中，再将创建的FutureTask对象传入到Thread构造方法的参数中，线程返回后可以从FutureTask对象获取Callable返回的参数")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第三种方式，实现callable接口，将实现的对象传入到FutureTask构造方法的参数中，再将创建的FutureTask对象传入到Thread构造方法的参数中")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" task "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FutureTask")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    log"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("debug")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t3running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" t3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t3"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nt3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t3returns"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"线程的上下文切换-thread-context-switch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的上下文切换-thread-context-switch"}},[t._v("#")]),t._v(" 线程的上下文切换（Thread Context Switch）")]),t._v(" "),s("p",[t._v("因为以下一些原因导致cpu不再执行当前线程，转而执行另一个线程的代码")]),t._v(" "),s("ul",[s("li",[t._v("线程的cpu时间片用完")]),t._v(" "),s("li",[t._v("垃圾回收")]),t._v(" "),s("li",[t._v("有更高优先级的线程需要运行")]),t._v(" "),s("li",[t._v("线程自己调用了sleep、yield、wait、join、park、synchronized、lock等方法")])]),t._v(" "),s("p",[t._v("当Context Switch发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，Java中对应的概念就是程序计数器，它的作用是记住下一条jvm指令的执行地址，是线程私有的")]),t._v(" "),s("ul",[s("li",[t._v("状态包括程序计数器，虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等")]),t._v(" "),s("li",[t._v("频繁的Context Switch会影响性能")])]),t._v(" "),s("h2",{attrs:{id:"常见的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的方法"}},[t._v("#")]),t._v(" 常见的方法")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("start和run")]),t._v(" "),s("p",[t._v("start用来启动线程，run则是线程启动以后要执行的代码，start之前线程处于NEW状态，start之后线程处于RUNNABLE状态，start调用两次会抛出异常")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：如果直接调用run，不会新建一个线程，而是在调用run方法的线程上执行")])]),t._v(" "),s("li",[s("p",[t._v("sleep和yield")]),t._v(" "),s("ul",[s("li",[t._v("调用sleep会让当前进程从RUNNING状态进入TIMED_WAITING状态")]),t._v(" "),s("li",[t._v("其他线程可以使用睡眠进程的interrupt方法打断正在睡眠的进程，这时sleep方法会抛出InterruptedException异常")]),t._v(" "),s("li",[t._v("睡眠结束后的进程未必会立即得到执行")]),t._v(" "),s("li",[t._v("建议使用TimeUnit的sleep代替Thread的sleep来获得更好的可读性")]),t._v(" "),s("li",[t._v("调用yield会让当前线程从RUNNING状态进入RUNNABLE就绪状态，然后调度进行其他线程")]),t._v(" "),s("li",[t._v("yield具体的实现依赖于操作系统的任务调度器")])])]),t._v(" "),s("li",[s("p",[t._v("线程优先级")]),t._v(" "),s("ul",[s("li",[t._v("线程优先级会提示调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它")]),t._v(" "),s("li",[t._v("如果cpu比较忙，那么优先级高的线程会获得更多的时间切片，但是cpu闲时，优先级几乎没有作用")])])]),t._v(" "),s("li",[s("p",[t._v("join")]),t._v(" "),s("ul",[s("li",[t._v("等待目标进程结束，需要注意的是如果join了多个线程，那么join的其他线程是并行的")]),t._v(" "),s("li",[t._v("可以加入一个long类型的参数限制join的最大等待时间，单位为毫秒")])])]),t._v(" "),s("li",[s("p",[t._v("interrupt")]),t._v(" "),s("ul",[s("li",[t._v("会将线程的isInterrupted标志设为true")]),t._v(" "),s("li",[t._v("中断阻塞的线程如sleep的线程会清空中断状态，并抛出异常")]),t._v(" "),s("li",[t._v("如果中断正常允许的线程，isInterrupted标志置为true，方便我们后续的编程操作")]),t._v(" "),s("li",[t._v("中断park进程会使代码继续执行，注意，interrupted标记为真的情况下调用park会失效")])]),t._v(" "),s("p",[t._v("使用interrupt实现两阶段终止模式")])])]),t._v(" "),s("h3",{attrs:{id:"主线程与守护线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主线程与守护线程"}},[t._v("#")]),t._v(" 主线程与守护线程")]),t._v(" "),s("p",[t._v("默认情况下，java进程要等待所有非守护线程结束才结束；")]),t._v(" "),s("p",[t._v("其他非守护线程结束之后，守护线程不管代码有没有执行完，都会结束")]),t._v(" "),s("ul",[s("li",[t._v("垃圾回收线程就是一种守护线程")]),t._v(" "),s("li",[t._v("Tomcat中的Acceptor和Poller线程都是守护线程，当Tomcat接收到shutdown命令后，不会等待其处理完请求")])]),t._v(" "),s("h2",{attrs:{id:"线程的状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程的状态"}},[t._v("#")]),t._v(" 线程的状态")]),t._v(" "),s("h3",{attrs:{id:"操作系统下的五种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作系统下的五种状态"}},[t._v("#")]),t._v(" 操作系统下的五种状态")]),t._v(" "),s("ul",[s("li",[t._v("初始状态：仅仅是在语言层面上创造了线程对象，还没有与操作系统线程关联")]),t._v(" "),s("li",[t._v("可运行状态：指该线程已被创建（与操作系统线程关联），可以有CPU调度执行")]),t._v(" "),s("li",[t._v("运行状态：指获取了CPU时间片运行中的状态，当CPU时间片用完，会从运行状态转换至可运行状态")]),t._v(" "),s("li",[t._v("阻塞状态：如果调用了阻塞API，如BIO读写文件，这时线程实际不会用到CPU，会导致线程上下文切换，进入阻塞状态，等BIO操作完毕，会由操作系统唤醒阻塞的线程，转换至可运行状态。\n"),s("ul",[s("li",[t._v("阻塞状态与可运行状态的区别是，对阻塞状态的线程来说只要它们一直不被唤醒，调度器就不会考虑调度它们")])])]),t._v(" "),s("li",[t._v("终止状态：线程已经执行完毕，生命周期已经结束，不会再转换为其他状态")])]),t._v(" "),s("h3",{attrs:{id:"java中的六种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java中的六种状态"}},[t._v("#")]),t._v(" Java中的六种状态")]),t._v(" "),s("p",[t._v("根据Java中的内部枚举，线程分为六种状态")]),t._v(" "),s("ul",[s("li",[t._v("NEW：同初始状态")]),t._v(" "),s("li",[t._v("RUNNABLE：包括可运行状态，运行状态，阻塞状态（操作系统中的）")]),t._v(" "),s("li",[t._v("BLOCKED：")]),t._v(" "),s("li",[t._v("WAITING：")]),t._v(" "),s("li",[t._v("TIMED_WAITING：")]),t._v(" "),s("li",[t._v("TERMINATED：同终止状态")])])])}),[],!1,null,null,null);s.default=e.exports}}]);