(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{406:function(t,a,n){"use strict";n.r(a);var s=n(7),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"符号-的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#符号-的功能"}},[t._v("#")]),t._v(" 符号*的功能")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("乘")])]),t._v(" "),a("li",[a("p",[t._v("作为取值的符号（作为一个运算符）")])]),t._v(" "),a("li",[a("p",[t._v("作为指针类型的标志（作为一个类型标识，类似unsigned？）")]),t._v(" "),a("p",[t._v("当*用于"),a("strong",[t._v("声明变量或者函数")]),t._v("的时候，表示该变量或者函数为一个"),a("strong",[t._v("指针类型")])])])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("int a = 4*5;\nint *b = &a;\t//这里用作类型标识，标识b的类型为 int* \nstd::cout << *b << std::endl;\t//这里用作取值符号，取得 int*类型变量 b 指向的值\n")])])]),a("h3",{attrs:{id:"符号-的功能-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#符号-的功能-2"}},[t._v("#")]),t._v(" 符号&的功能")]),t._v(" "),a("ol",[a("li",[t._v("按位与")]),t._v(" "),a("li",[t._v("作为引用变量类型的标志")]),t._v(" "),a("li",[t._v("取地址的符号（运算符）")])]),t._v(" "),a("div",{staticClass:"language-c++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("int a = 1&0; \t//这里表示1和0相与\nint &b = a;\t\t//这里表示b的类型为 int&\nint *c = &a;\t//这里表示取a的地址，传入int*变量\nstd::cout << a << std::endl;\nstd::cout << b << std::endl;\t//b为a的引用，实质上就是内存中同一个存储单元\n")])])]),a("h3",{attrs:{id:"引用变量和指针变量的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用变量和指针变量的区别"}},[t._v("#")]),t._v(" 引用变量和指针变量的区别")]),t._v(" "),a("div",{staticClass:"language-C++ extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\nint a = 0;\nint b = 0;\nint tmp = 0;\nwhile(a+b<n){\n    //找到第n大的数\n    if(A[a]<B[b]){\n        a++;\n        tmp = A[a];\n    }else{\n        b++;\n        tmp = B[b];\n    }\n}\n\n\n\n\n\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);