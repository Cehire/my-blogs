(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{405:function(_,v,t){"use strict";t.r(v);var a=t(7),s=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("p",[_._v("[toc]")]),_._v(" "),v("p",[_._v("Python的语言中的变量不需要显式指出数据类型的声明")]),_._v(" "),v("div",{staticClass:"language-python extra-class"},[v("pre",{pre:!0,attrs:{class:"language-python"}},[v("code",[_._v("a"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[_._v(":")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token builtin"}},[_._v("int")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[_._v("10")]),_._v("\nb "),v("span",{pre:!0,attrs:{class:"token operator"}},[_._v("=")]),_._v(" "),v("span",{pre:!0,attrs:{class:"token number"}},[_._v("10")]),_._v("\n")])])]),v("p",[_._v("Python能够自动推断出变量的类型")]),_._v(" "),v("h3",{attrs:{id:"数字类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数字类型"}},[_._v("#")]),_._v(" 数字类型")]),_._v(" "),v("p",[_._v("表示数字或者数值的数据类型就是数字类型")]),_._v(" "),v("ul",[v("li",[_._v("整形（int）：Python3之后没有长整型（long）只有int")]),_._v(" "),v("li",[_._v("浮点型（float）")]),_._v(" "),v("li",[_._v("复数类型（complex）")]),_._v(" "),v("li",[_._v("布尔类型（bool）")])]),_._v(" "),v("h4",{attrs:{id:"整型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#整型"}},[_._v("#")]),_._v(" 整型")]),_._v(" "),v("p",[_._v("整型的表示形式：")]),_._v(" "),v("ul",[v("li",[_._v("二进制：以0b或者0B开头")]),_._v(" "),v("li",[_._v("八进制：以0o或者0O开头")]),_._v(" "),v("li",[_._v("十进制：默认")]),_._v(" "),v("li",[_._v("十六进制：以0x或0X开头")])]),_._v(" "),v("p",[_._v("整型不同类型的转换")]),_._v(" "),v("blockquote",[v("ol",[v("li",[_._v("bin()：十进制转换为二进制，输出形式是字符串")]),_._v(" "),v("li",[_._v("oct()：十进制转换为八进制，输出形式是字符串")]),_._v(" "),v("li",[_._v("hex()：十进制转换为十六进制，输出形式是字符串")]),_._v(" "),v("li",[_._v("int()：接收一个符合整型规范的字符串，并将字符串转换为整型")])]),_._v(" "),v("p",[_._v("Python中，当多个变量的值相同时，这个值只在内存中保存一次，多个变量都指向同一内存。数字是Python中的"),v("strong",[_._v("不可变对象")]),_._v("，当要修改它的值时，并不是真的修改内存中变量的值，而是**把新的值放入内存中，然后修改变量，使得变量指向新值的内存地址。**浮点数、复数等其他数字类型及其他类型的不可变对象具有同样的特点")]),_._v(" "),v("p",[_._v("Python具有自动管理内存功能，如果一个值没有任何变量指向，则Python会自动将其删除，可以显式地使用del命令删除不再使用的值。")])]),_._v(" "),v("h4",{attrs:{id:"浮点数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[_._v("#")]),_._v(" 浮点数")]),_._v(" "),v("p",[_._v("浮点数就是数学中的小数")]),_._v(" "),v("ul",[v("li",[_._v("Python中的浮点型一般以十进制表示，由整数和小数部分（可以是0）组成")]),_._v(" "),v("li",[_._v("对于很大或者很小的浮点型可以使用科学计数法表示 （1.2e-2：1.2乘以10的-2次方）")]),_._v(" "),v("li",[_._v("Python中的浮点型是双精度的，每个浮点型的数据占8个字节")])]),_._v(" "),v("h4",{attrs:{id:"复数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#复数"}},[_._v("#")]),_._v(" 复数")]),_._v(" "),v("ul",[v("li",[_._v("复数由“实部”和“虚部”组成")]),_._v(" "),v("li",[_._v("实数部分和虚数部分都是浮点型")]),_._v(" "),v("li",[v("strong",[_._v("虚数部分后面必须要有j或者J")])])]),_._v(" "),v("blockquote",[v("p",[_._v("Python中表示复数有两种方法")]),_._v(" "),v("ol",[v("li",[_._v("a+bj")]),_._v(" "),v("li",[_._v("complex(a,b)")])]),_._v(" "),v("p",[_._v("其中a表示实部，b表示虚部")])]),_._v(" "),v("h4",{attrs:{id:"布尔类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[_._v("#")]),_._v(" 布尔类型")]),_._v(" "),v("ul",[v("li",[_._v("Python中的布尔类型只有True和False两个取值")]),_._v(" "),v("li",[_._v("True对应整数1，False对应整数0")]),_._v(" "),v("li",[_._v("常用的布尔运算包括and、or、not三种")])]),_._v(" "),v("blockquote",[v("p",[v("strong",[_._v("等同于False的值")])]),_._v(" "),v("ul",[v("li",[_._v("None")]),_._v(" "),v("li",[_._v("False")]),_._v(" "),v("li",[_._v("任何为0的数字类型，如0、0.0、0j")]),_._v(" "),v("li",[_._v('任何空序列，如""、()、[]')]),_._v(" "),v("li",[_._v("空字典{}")]),_._v(" "),v("li",[_._v("用户定义的类实例中定义了"),v("code",[_._v("__bool__()")]),_._v("或者"),v("code",[_._v("__len__()")]),_._v("方法，并且该方法的返回0或者False")])]),_._v(" "),v("p",[v("strong",[_._v("等同于True的值")])]),_._v(" "),v("ul",[v("li",[_._v("非0整数值")]),_._v(" "),v("li",[_._v("非空字符串")])]),_._v(" "),v("p",[v("strong",[_._v("短路法则")])]),_._v(" "),v("p",[_._v("Python中的and和or运算中具有短路效果")])]),_._v(" "),v("h4",{attrs:{id:"数值运算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数值运算"}},[_._v("#")]),_._v(" 数值运算")]),_._v(" "),v("ul",[v("li",[_._v("整除："),v("code",[_._v("//")])]),_._v(" "),v("li",[_._v("幂："),v("code",[_._v("**")])])]),_._v(" "),v("p",[_._v("其他运算符与大部分语言相同")]),_._v(" "),v("p",[_._v("数值计算函数库：")]),_._v(" "),v("h3",{attrs:{id:"字符串类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[_._v("#")]),_._v(" 字符串类型")]),_._v(" "),v("p",[_._v("在Python中，字符串有三种表示方式")]),_._v(" "),v("ul",[v("li",[_._v("单引号")]),_._v(" "),v("li",[_._v("双引号")]),_._v(" "),v("li",[_._v("三重引号")])]),_._v(" "),v("h4",{attrs:{id:"单引号、双引号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单引号、双引号"}},[_._v("#")]),_._v(" 单引号、双引号")]),_._v(" "),v("p",[_._v("在Python中，单引号和双引号表示的字符串是等价的，没有本质的区别，可以在一种引号中"),v("strong",[_._v("嵌套")]),_._v("另一种引号。")]),_._v(" "),v("h4",{attrs:{id:"三重引号"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三重引号"}},[_._v("#")]),_._v(" 三重引号")]),_._v(" "),v("p",[_._v("三重引号可以三个单引号，也可以三个双引号。这种方式表示的字符串也叫做"),v("strong",[_._v("块字符串")]),_._v("。三重引号是以三个同一种类型的引号开始，并以三个相同引号结束的字符串表示方式。")]),_._v(" "),v("h4",{attrs:{id:"转义字符"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[_._v("#")]),_._v(" 转义字符")]),_._v(" "),v("p",[_._v("转义字符和其他语言没有太多区别，")]),_._v(" "),v("h4",{attrs:{id:"raw字符串"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#raw字符串"}},[_._v("#")]),_._v(" raw字符串")]),_._v(" "),v("p",[_._v("raw字符串的格式是"),v("code",[_._v("r'...'")]),_._v("，在raw字符串中，"),v("strong",[_._v("所有的字符都是直接按照字面意思来解释，没有转义字符或者不能打印的字符")])]),_._v(" "),v("h4",{attrs:{id:"字符串操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作"}},[_._v("#")]),_._v(" 字符串操作")]),_._v(" "),v("p",[_._v("日后再补充")]),_._v(" "),v("h3",{attrs:{id:"复合数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#复合数据类型"}},[_._v("#")]),_._v(" 复合数据类型")]),_._v(" "),v("h4",{attrs:{id:"list-列表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#list-列表"}},[_._v("#")]),_._v(" List（列表）")]),_._v(" "),v("p",[_._v("创建列表："),v("code",[_._v("变量名 = [元素1,元素2,......,元素n]")])]),_._v(" "),v("p",[_._v("list类型中区分元素的顺序，且允许包含重复的元素")]),_._v(" "),v("h5",{attrs:{id:"基本操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本操作"}},[_._v("#")]),_._v(" "),v("strong",[_._v("基本操作")])]),_._v(" "),v("ul",[v("li",[_._v("索引")]),_._v(" "),v("li",[_._v("切片")]),_._v(" "),v("li",[_._v("加法和乘法")]),_._v(" "),v("li",[_._v("修改和删除")]),_._v(" "),v("li",[_._v("追加插入和拓展")])]),_._v(" "),v("h5",{attrs:{id:"多维列表"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多维列表"}},[_._v("#")]),_._v(" 多维列表")]),_._v(" "),v("h5",{attrs:{id:"迭代器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[_._v("#")]),_._v(" 迭代器")]),_._v(" "),v("h5",{attrs:{id:"列表解析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列表解析"}},[_._v("#")]),_._v(" 列表解析")]),_._v(" "),v("h5",{attrs:{id:"列表函数和方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#列表函数和方法"}},[_._v("#")]),_._v(" 列表函数和方法")]),_._v(" "),v("h4",{attrs:{id:"tuple-元组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tuple-元组"}},[_._v("#")]),_._v(" tuple（元组）")]),_._v(" "),v("p",[_._v("创建元组："),v("code",[_._v("变量名 = (元素1,元素2,...,元素n)")])]),_._v(" "),v("p",[v("strong",[_._v("注意")]),_._v("：当元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当做运算符使用。")]),_._v(" "),v("h5",{attrs:{id:"基本操作-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本操作-2"}},[_._v("#")]),_._v(" 基本操作")]),_._v(" "),v("ol",[v("li",[_._v("访问")]),_._v(" "),v("li",[_._v("修改")]),_._v(" "),v("li",[_._v("删除")]),_._v(" "),v("li",[_._v("统计")]),_._v(" "),v("li",[_._v("查找")])]),_._v(" "),v("h5",{attrs:{id:"元组的函数和方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#元组的函数和方法"}},[_._v("#")]),_._v(" 元组的函数和方法")]),_._v(" "),v("h5",{attrs:{id:"元组的优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#元组的优势"}},[_._v("#")]),_._v(" 元组的优势")]),_._v(" "),v("ul",[v("li",[_._v("可以使函数返回多个值")]),_._v(" "),v("li",[_._v("可以使程序运行性能提升")]),_._v(" "),v("li",[_._v("一般来说，创建元组类型tuple的变量比列表类型list要快，而且占用更小的存储空间")]),_._v(" "),v("li",[_._v("使用元组是线程安全的")]),_._v(" "),v("li",[_._v("元组类型变量的元素不可更改性，可保证多线程读写时的安全问题")])]),_._v(" "),v("h4",{attrs:{id:"dict-字典"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#dict-字典"}},[_._v("#")]),_._v(" dict（字典）")]),_._v(" "),v("p",[_._v("创建字典对象："),v("code",[_._v("变量名=(key1:value1,key:value2,...,keyn:valuen)")])]),_._v(" "),v("ul",[v("li",[_._v("字典的元素是可变的，可以是列表、元组、字典等任意数据类型，但是键（key）值必须使用不可变类型")]),_._v(" "),v("li",[_._v("在同一个字典变量中，键（key）值必须是唯一的")])]),_._v(" "),v("h5",{attrs:{id:"基本操作-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本操作-3"}},[_._v("#")]),_._v(" 基本操作")]),_._v(" "),v("ol",[v("li",[_._v("访问")]),_._v(" "),v("li",[_._v("修改")]),_._v(" "),v("li",[_._v("删除")])]),_._v(" "),v("h5",{attrs:{id:"字典的嵌套-略"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字典的嵌套-略"}},[_._v("#")]),_._v(" 字典的嵌套（略）")]),_._v(" "),v("h5",{attrs:{id:"字典的遍历"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字典的遍历"}},[_._v("#")]),_._v(" 字典的遍历")]),_._v(" "),v("h5",{attrs:{id:"字典函数和方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#字典函数和方法"}},[_._v("#")]),_._v(" 字典函数和方法")]),_._v(" "),v("h4",{attrs:{id:"set-集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#set-集合"}},[_._v("#")]),_._v(" set（集合）")]),_._v(" "),v("p",[_._v("创建集合对象："),v("code",[_._v("变量名 = {元素1,元素2,...,元素n}")])]),_._v(" "),v("p",[_._v("集合的特性：")]),_._v(" "),v("ul",[v("li",[_._v("无序性：元素之间没有确定的顺序")]),_._v(" "),v("li",[_._v("互异性：不会出现重复的元素")]),_._v(" "),v("li",[_._v("确定性：元素和集合只有属于或者不属于的关系")])]),_._v(" "),v("p",[v("strong",[_._v("注意")]),_._v("：创建空集合要使用"),v("code",[_._v("set();")]),_._v("，{}创建的是空字典")]),_._v(" "),v("h5",{attrs:{id:"集合的数字运算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合的数字运算"}},[_._v("#")]),_._v(" 集合的数字运算")]),_._v(" "),v("h5",{attrs:{id:"基本操作-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本操作-4"}},[_._v("#")]),_._v(" 基本操作")]),_._v(" "),v("h5",{attrs:{id:"不可变集合"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不可变集合"}},[_._v("#")]),_._v(" 不可变集合")]),_._v(" "),v("h5",{attrs:{id:"集合函数和方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#集合函数和方法"}},[_._v("#")]),_._v(" 集合函数和方法")])])}),[],!1,null,null,null);v.default=s.exports}}]);